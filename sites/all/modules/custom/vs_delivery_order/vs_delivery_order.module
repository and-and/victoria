<?php

  /**
 * Implements hook_ctools_plugin_directory().
 *
 * @param string $owner
 *   The system name of the module owning the plugin type for which a base
 *   directory location is being requested.
 *
 * @param string $plugin_type
 *   The name of the plugin type for which a base directory is being requested.
 *
 * @return path
 *   The path where CTools' plugin system should search for plugin files,
 *   relative to your module's root. Omit leading and trailing slashes.
 */
function vs_delivery_order_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' &&  in_array($plugin_type, array('content_types'))) {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_menu.
 */
function vs_delivery_order_menu() {
  $items = array();
  
  $items['popup/devlivery-order-form'] = array(
      'page callback' => 'vs_delivery_order_form_page',
      'access callback' => TRUE,
  );
  
  return $items;
}

function vs_delivery_order_form_page() {
  $form = drupal_get_form('vs_delivery_order_form');
  
  return drupal_render($form);
}

function vs_delivery_order_theme() {
  return array(
//    'vs_userzone_login_form' => array(
//      'render element' => 'form',
//      'path' => drupal_get_path('module', 'vs_userzone') . '/theme',
//      'template' => 'vs-userzone-login-form',
//    ),    
  );
}
/**
 * Returns an initialized order object.
 *
 * @param $uid
 *   The uid of the owner of the order.
 * @param $status
 *   Optionally the order status of the new order.
 * @param $type
 *   The type of the order; defaults to the standard 'order' type.
 *
 * @return
 *   An order object with all default fields initialized.
 */
function delivery_order_new($uid = 0, $title = '', $type = 'delivery_order') {

  return entity_get_controller('delivery_order')->create(array(
    'id' => 0,
    'type' =>$type,
    'uid' => $uid,
//    'status' => $status,
    'title' => $title,
  ));

}

/**
 * Saves an order.
 *
 * @param $order
 *   The full order object to save. If $order->order_id is empty, a new order
 *     will be created.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function delivery_order_save($order) {
  return entity_get_controller('delivery_order')->save($order);
}

/**
 * Loads an order by ID.
 */
function delivery_order_load($order_id) {
  $orders = commerce_order_load_multiple(array($order_id), array());
  return $orders ? reset($orders) : FALSE;
}

function vs_delivery_order_form($form, &$form_state) {
  $order = delivery_order_new();
  field_attach_form('delivery_order', $order, $form, $form_state);
  return $form;
}

function vs_delivery_order_form_submit($form, &$form_state) {
//  field_attach_submit
}

function vs_delivery_order_form_validate($form, &$form_state) {
  
}

function template_preprocess_node__delivery_orders_page(&$vars) {
//  $vars['form'] = drupal_get_form('vs_delivery_order_form');
//  drupal_add_js(drupal_get_path('theme', 'victoria') . '/scripts/vs-product.js');
//  drupal_add_js(drupal_get_path('theme', 'victoria') . '/scripts/vs-popup.js');
}

function vs_delivery_order_block_info() {
  return array(
    'vs_delivery_order_form' => array(
      'info' => t('VS order delivery form'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

function vs_delivery_order_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'vs_delivery_order_form':
      $block['subject'] = t('VS order delivery form');
      $block['content'] = //drupal_get_form('vs_delivery_order_form');
              array(
        '#theme' => 'vs_userzone_menu',
        '#title' => t('VS userzone menu'),
      );
      break;
  }
  return $block;
}