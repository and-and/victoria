<?php

function vs_product_cart_form_alter (&$form, &$form_state, $form_id) {
  if ($form_id == 'views_form_commerce_cart_form_default') {
    unset($form['#action']);
    drupal_add_js(drupal_get_path('theme', 'victoria') . '/scripts/vs-checkout.js');
    foreach (element_children($form['edit_delete']) as $key) {
      $form['edit_delete'][$key]['#ajax']['callback'] = 'vs_product_cart_delete_item_ajax';
      $form['edit_delete'][$key]['#ajax']['effect'] = 'fade';
    }
  }
}

function vs_product_cart_delete_item_ajax($form, &$form_state) {
  if (isset($form_state['triggering_element']['#line_item_id'])) {
    $line_item_id = $form_state['triggering_element']['#line_item_id'];
  }
  $wrapper = '.' . $line_item_id . '-cart-line-item-id';
//  dsm($wrapper);
  $commands[] = ajax_command_remove($wrapper);
  return array('#type' => 'ajax', '#commands' => $commands);  
}
  /**
 * Implements hook_ctools_plugin_directory().
 *
 * @param string $owner
 *   The system name of the module owning the plugin type for which a base
 *   directory location is being requested.
 *
 * @param string $plugin_type
 *   The name of the plugin type for which a base directory is being requested.
 *
 * @return path
 *   The path where CTools' plugin system should search for plugin files,
 *   relative to your module's root. Omit leading and trailing slashes.
 */
function vs_product_cart_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' &&  in_array($plugin_type, array('content_types'))) {
    return 'plugins/' . $plugin_type;
  }
}

function vs_product_cart_form_commerce_cart_add_to_cart_form_alter (&$form, &$form_state, $form_id) {
  $form['#theme'] = 'vs_product_cart_add_to_cart_form';
  $form['#attached']['js'][] = drupal_get_path('theme', 'victoria') . '/scripts/vs-product.js';
//  $form['#attached']['js'][] = drupal_get_path('theme', 'victoria') . '/scripts/vs-popup.js';
  $form['submit']['#attributes']['class'][] = 'vs-button-3-steps';
  $form['submit']['#ajax']['callback'] = 'vs_product_cart_ajax_callback';
  $form['submit']['#ajax']['effect'] = 'fade';
}

function vs_product_cart_ajax_callback($form, &$form_state){
  global $user;
  $form_state['rebuild'] = TRUE;
  $commands = array();
  $order = commerce_cart_order_load($user->uid);
  $order_total_arr = field_get_items('commerce_order', $order, 'commerce_order_total');
  $order_total = commerce_currency_format($order_total_arr[0]['amount'], $order_total_arr[0]['currency_code']);
  $price_arr = field_get_items('commerce_line_item', $form_state['line_item'], 'commerce_total');
  $price = commerce_currency_format($price_arr[0]['amount'], $price_arr[0]['currency_code']);
  $product_img = $form_state['default_product']->field_prod_main_image['und'][0];
  $product_img['path'] = $product_img['uri'];
  $product_img['style_name'] = 'confirm_add_cart';
  $options = vs_product_cart_get_html_options($form_state['line_item']->line_item_id, $form_state['default_product']);
  $content = theme('vs_product_cart_add_to_cart_confirm', array(
    'quantity' => $form_state['values']['quantity'],
    'product_img' => $product_img,
    'options' => $options,
    'price' => $price,
    'order_total' => $order_total,
    'line_item' => $form_state['line_item'], 
    'product' => $form_state['default_product'],
  ));
  $cart_header = theme('vs_product_cart_header_line');
  // The next line allows different quantities
  // to be submitted each time.
  unset($form['quantity']['#value']);

  // The next line allows different product_id
  // to be submitted each time.
//  unset($form['product_id']['#value']);

  // Rebuild form to allow resubmit and revalidation.
  drupal_rebuild_form($form_id = $form['#form_id'], $form_state, $old_form = $form);
  // New content.
  $commands[] = ajax_command_replace('.shopping-bag', $cart_header);
  $commands[] = ajax_command_html('#vs-cart-confirmation-ajax-wrapper', $content);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Return label and value of product options.
 */
function vs_product_cart_get_html_options($line_item_id, $product) {
  $product_options = commerce_option_load_by_line_item($line_item_id);
  $product_opt = reset($product_options);
  if (isset($product_opt->field_txt_attribute)) {
    $options[0]['label'] = $product->field_size_labels['und'][0]['value']; 
    $options[0]['value'] = $product_opt->field_txt_attribute['und'][0]['value'];
  }
  if (isset($product_opt->field_int_attribute)) {
    $options[1]['label'] = $product->field_size_labels['und'][1]['value']; 
    $options[1]['value'] = $product_opt->field_int_attribute['und'][0]['value'];
  }
  return $options;
}

function vs_product_cart_theme (){
  return array(
    'vs_product_cart_add_to_cart_form' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'vs_product_cart') . '/theme',
      'template' => 'vs-product-cart-add-to-cart-form',
    ),
    'vs_product_cart_add_to_cart_confirm' => array(
//      'render element' => 'form',
      'path' => drupal_get_path('module', 'vs_product_cart') . '/theme',
      'template' => 'vs-product-cart-add-to-cart-confirm',
    ),
    'vs_product_cart_header_line' => array (
      'path' => drupal_get_path('module', 'vs_product_cart') . '/theme',
      'template' => 'vs-product-cart-header-line',
    ),
    'vs_product_cart_view_pane' => array (
      'path' => drupal_get_path('module', 'vs_product_cart') . '/theme',
      'template' => 'vs-product-cart-view-pane',
    ),
  );
}

function template_preprocess_vs_product_cart_add_to_cart_form (&$vars) {
  drupal_add_js(drupal_get_path('module', 'cloud_zoom') . '/js/cloud_zoom.js');
  drupal_add_js(drupal_get_path('module', 'cloud_zoom') . '/libraries/cloud-zoom/cloud-zoom.1.0.3.min.js');
  $field_options = $vars['form']['field_options'][0];
  if (empty($field_options)) {
    return;
  }
  $product_id = $vars['form']['product_id']['#value'];
  $product = commerce_product_load($product_id);
  $rendered_html = array();
  $count = 0;
  foreach (element_children($field_options) as $key) {
//    dsm($product);
    $attr_str = $product->field_valid_attributes['und'][$count]['safe_value'];
    $attr_arr = explode('|', $attr_str);
    foreach ($attr_arr as $k => $v) {
      $rendered_html[$key]['options'] .= '<p class="ui-selectmenu-value"><a>' . strtoupper($v) . '</a></p>';
    }
    if (isset($product->field_size_labels['und'][$count]['safe_value'])) {
      $rendered_html[$key]['title'] = $product->field_size_labels['und'][$count]['safe_value'];
    }
    $count ++;
  }
  $vars['rendered_html'] = $rendered_html;
}

function vs_product_cart_preprocess_views_view_fields (&$vars) {
  if ($vars['theme_hook_suggestion'] == 'views_view_fields__product_display__default') {
//    dsm($vars['row']);
  }
}

function vs_product_cart_get_count_products() {
  global $user;
  // First check to ensure there are products in the shopping cart.
  if ($order = commerce_cart_order_load($user->uid)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    // If there are one or more products in the cart...
    if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) > 0) {
      $query = db_select('commerce_line_item', 'li');
      $query->addExpression('sum(quantity)', 'sum');
      $query->condition('order_id', $order->order_id);
      $query->condition('type', 'product');
      $result = $query->execute()->fetchAssoc();
      if (!isset($result['sum']) || !is_numeric($result['sum'])) {
        return FALSE;
      }
      return array(
        'product_count' => round($result['sum']),
        'order_id' => $order->order_id,
      );
    }
  }
  return FALSE;
}